(define/contract (merge intervals)
  (-> (listof (listof exact-integer?)) (listof (listof exact-integer?)))
(letrec ((coll (lambda (intervals)
(letrec ((cont
(lambda (n)
(if (< (length intervals) 2)
intervals
(let ((intervals (sort intervals #:key car <)))
(let (
(a (car (list-ref intervals (- n 1))))
(b (car (cdr (list-ref intervals (- n 1)))))
(c (car (list-ref intervals n)))
(d (car (cdr (list-ref intervals n)))))
(if (< b c)
        (if (= n 1)
            (cons  (list-ref intervals 0) (cons (list-ref intervals n)
                (if (>= n (- (length intervals) 1))
                '()
                (cont (add1 n)))))
            (cons (list-ref intervals n)
                (if (>= n (- (length intervals) 1))
                '()
                (cont (add1 n))))
        )
(cond
[   (and  (<= a c) (<= b d))
    (cons (list a d)
            (if (>= n (- (length intervals) 1))
            '()
            (cont (add1 n))))
]
[   (and (<= b d) (>= a c))
    (cons (list c d)
            (if (>= n (- (length intervals) 1))
            '()
            (cont (add1 n))))
]
[   (and (<= a c) (>= b d))
    (cons (list a b)
            (if (>= n (- (length intervals) 1))
            '()
            (cont (add1 n))))
]
[   (and (>= a c) (>= b d))
    (cons (list c b)
            (if (>= n (- (length intervals) 1))
            '()
            (cont (add1 n))))
]
)))))))) (cont 1))
(if (eq? (coll intervals) (coll intervals))
    (coll intervals)
    (coll (coll intervals))
)
)))(coll intervals))
)
